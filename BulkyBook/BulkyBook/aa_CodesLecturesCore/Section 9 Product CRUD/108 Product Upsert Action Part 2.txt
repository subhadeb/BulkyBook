One Mistake that I Made in code was in Repository.cs in the method GetAll,
I have only written query.Include(includeProp);

It should have been
query= query.Include(includeProp);

First Let's run the Solution before we can make fixes.

Now on running and inserting a new Image, we see a recod got created, but Datatables were breaking in index page mostly due to Blank Category.

And the record in the database is saved like:
Id	Title	Description	Author	ListPrice	Price	Price50	Price100	CategoryId	CoverTypeId	ISBN	ImageUrl
1	My Product	<p>Strong Text</p>	dsfsf	34	345	1234	2343	4	1	232	\image\product980ff500-9aba-4464-8a0f-58468898b6c4.jpg



To fix the Datable error we should open product.js under js under wwwroot, changed category.Name to category.name, he was saying he intentionally did that for us to point that these shold be in camel case. Now on reloading we are able to see the category.

If we click the Edit button it loads the data with all the details.

Now we would like to Display the image in the Right.

For that go to Upsert.cshtml.

FInd the div with <div class="col-8 pt-4">, collapse this div, and after this check if Model.Product.Id is not zero. then add a div with class col-3, offset-1 pt-4, inside it add image width 100% and some style. overall it's like:

        @if (Model.Product.Id != 0)
        {
            <div class="col-3 offset-1 pt-4">
                <img src="@Model.Product.ImageUrl" width="100%" style="border-radius:5px;border:1px solid #bbb9b9"/>
            </div>
        }
Now we are not able the see the image, this is becase the url is wrong, in the Database we see the imageUrl is like:

\image\product980ff500-9aba-4464-8a0f-58468898b6c4.jpg

It should have been \images\products\980ff....

Now Stopped the solution with Shift + F5.

In Upsert post at the middle we have like:
productVM.Product.ImageUrl = @"\image\product" + fileName + extension;

It shold be updated to 
productVM.Product.ImageUrl = @"\images\products\" + fileName + extension;

Now on running again if we update the image by choosing a new file and update and edit again we see the Right Image.
---------------------------------------------------------------
As the Codes are Running Without issues pushed the codes to Github.

--Repository.cs
using BulkyBook.DataAccess.Data;
using BulkyBook.DataAccess.Repository.IRepository;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

namespace BulkyBook.DataAccess.Repository
{
    public class Repository<T> : IRepository<T> where T : class
    {
        private readonly ApplicationDbContext _db;
        internal DbSet<T> dbSet;

        public Repository(ApplicationDbContext db)
        {
            _db = db;
            this.dbSet = _db.Set<T>();
        }

        public void Add(T entity)
        {
            dbSet.Add(entity);
        }

        public T Get(int id)
        {
            return dbSet.Find(id);
        }

        public IEnumerable<T> GetAll(Expression<Func<T, bool>> filter = null, Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null, string includeProperties = null)
        {
            IQueryable<T> query = dbSet;
            if (filter != null)
            {
                query = query.Where(filter);
            }
            if (includeProperties != null)
            {
                foreach (var includeProp in includeProperties.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                {
                    query= query.Include(includeProp);
                }
            }
            if (orderBy != null)
            {
                return orderBy(query).ToList();
            }

            return query.ToList();
        }

        public T GetFirstOrDefault(Expression<Func<T, bool>> filter = null, string includeProperties = null)
        {
            IQueryable<T> query = dbSet;
            if (filter != null)
            {
                query = query.Where(filter);
            }
            if (includeProperties != null)
            {
                foreach (var includeProp in includeProperties.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                {
                    query.Include(includeProp);
                }
            }
            return query.FirstOrDefault();
        }

        public void Remove(int id)
        {
            T entity = dbSet.Find(id);
            Remove(entity);
        }

        public void Remove(T entity)
        {
            dbSet.Remove(entity);
        }

        public void RemoveRange(IEnumerable<T> entity)
        {
            dbSet.RemoveRange(entity);
        }
    }
}


---product.js
var dataTable;

$(document).ready(function () {
    loadDataTable();
});

function loadDataTable() {
    dataTable = $('#tblData').DataTable({
        "ajax": {
           'url': '/Admin/Product/GetAll'
        },
        "columns": [
            { "data": "title", "width": '15%' },
            { "data": "isbn", "width": '15%' },
            { "data": "price", "width": '15%' },
            { "data": "author", "width": '15%' },
            { "data": "category.name", "width": '15%' },
            {
                'data': 'id',
                'render': function (data) {
                    return `
                        <div class="text-center">
                            <a href="/Admin/Product/Upsert/${data}" class="btn btn-success text-white" style="cursor:pointer">
                                <i class="fas fa-edit"></i>
                            </a>
                            <a onClick=Delete('/Admin/Product/Delete/${data}') class="btn btn-danger text-white" style="cursor:pointer">
                                <i class="fas fa-trash-alt"></i>
                            </a>
                        </div>
`

                }, 'width': '40%'
            }
        ]
    })
}
function Delete(url) {
    swal({
        title: "Are You sure you want to Delete",
        text: "You will not be able to restore the data!",
        icon: "warning",
        buttons: true,
        dangerMode: true
    }).then(willDelete => {
        if (willDelete) {
            $.ajax({
                type: 'DELETE',
                url: url,
                success: function (data) {
                    if (data.success) {
                        toastr.success(data.message);
                        dataTable.ajax.reload()
                    }
                    else {
                        toastr.error(data.message);
                    }
                }
            })
        }

    })
}

--ProductController.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using BulkyBook.DataAccess.Repository.IRepository;
using BulkyBook.Models;
using BulkyBook.Models.ViewModels;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;

namespace BulkyBook.Areas.Admin.Controllers
{
    [Area("Admin")]
    public class ProductController : Controller
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IWebHostEnvironment _hostEnvironment;
        public ProductController(IUnitOfWork unitOfWork, IWebHostEnvironment hostEnvironment)
        {
            _unitOfWork = unitOfWork;
            _hostEnvironment = hostEnvironment;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Upsert(int? id)
        {
            ProductVM productVM = new ProductVM()
            {
                Product = new Product(),
                CategoryList = _unitOfWork.Category.GetAll().Select(i => new SelectListItem
                {
                    Text = i.Name,
                    Value = i.Id.ToString()
                }),
                CoveredTypeList = _unitOfWork.CoverType.GetAll().Select(i => new SelectListItem
                {
                    Text = i.Name,
                    Value = i.Id.ToString()
                })
            };
            if (id == null)
            {
                return View(productVM);
            }
            productVM.Product = _unitOfWork.Product.Get(id.GetValueOrDefault());
            if (productVM.Product == null)
            {
                return NotFound();
            }
            return View(productVM);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Upsert(ProductVM productVM)
        {
            if (ModelState.IsValid)
            {
                string webRootPath = _hostEnvironment.WebRootPath;
                var files = HttpContext.Request.Form.Files;
                if (files.Count > 0)
                {
                    string fileName = Guid.NewGuid().ToString();
                    var uploads = Path.Combine(webRootPath, @"images\products");
                    var extension = Path.GetExtension(files[0].FileName);

                    if (productVM.Product.ImageUrl != null)
                    {
                        //this is an edit and we need to remove old image.
                        var imagePath = Path.Combine(webRootPath, productVM.Product.ImageUrl.TrimStart('\\'));
                        if (System.IO.File.Exists(imagePath))
                        {
                            System.IO.File.Delete(imagePath);
                        }
                    }
                    using (var fileStream = new FileStream(Path.Combine(uploads, fileName + extension), FileMode.Create))
                    {
                        files[0].CopyTo(fileStream);
                    }
                    productVM.Product.ImageUrl = @"\images\products\" + fileName + extension;
                }
                else
                {
                    //Update when they do not change the image.
                    if (productVM.Product.Id != 0)
                    {
                        Product objFromDb = _unitOfWork.Product.Get(productVM.Product.Id);
                        productVM.Product.ImageUrl = objFromDb.ImageUrl;
                    }
                }

                if (productVM.Product.Id == 0)
                {
                    _unitOfWork.Product.Add(productVM.Product);
                }
                else
                {
                    _unitOfWork.Product.Update(productVM.Product);
                }
                _unitOfWork.Save();
                return RedirectToAction(nameof(Index));

            }
            return View(productVM);
        }

        #region API Calls

        [HttpGet]
        public IActionResult GetAll()
        {
            var allObj = _unitOfWork.Product.GetAll(includeProperties: "Category,CoverType");
            return Json(new { data = allObj });
        }

        [HttpDelete]
        public IActionResult Delete(int id)
        {
            var objFromDb = _unitOfWork.Product.Get(id);
            if (objFromDb == null)
            {
                return Json(new { success = false, message = "Error While Deleting" });
            }
            _unitOfWork.Product.Remove(objFromDb);
            _unitOfWork.Save();
            return Json(new { success = true, message = "Delete Succesful" });
        }

        #endregion
    }
}


--Upsert.cshtml
@model BulkyBook.Models.ViewModels.ProductVM

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var title = "Create Product";
}

<form method="post" enctype="multipart/form-data">
    <div class="row p-3 border">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        @if (Model.Product.Id != 0)
        {
            title = "Edit Product";
            <input type="hidden" asp-for="Product.Id">
        }
        <div class="col-12 border-bottom">
            <h2 class="text-primary">@title</h2>
        </div>
        <div class="col-8 pt-4">
            <div class="form-group row">
                <div class="col-4">
                    <label asp-for="Product.Title"></label>
                </div>
                <div class="col-8">
                    <input asp-for="Product.Title" class="form-control">
                    <span asp-validation-for="Product.Title" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-4">
                    <label asp-for="Product.ISBN"></label>
                </div>
                <div class="col-8">
                    <input asp-for="Product.ISBN" class="form-control">
                    <span asp-validation-for="Product.ISBN" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-4">
                    <label asp-for="Product.Author"></label>
                </div>
                <div class="col-8">
                    <input asp-for="Product.Author" class="form-control">
                    <span asp-validation-for="Product.Author" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-4">
                    <label asp-for="Product.Description"></label>
                </div>
                <div class="col-8">
                    <textarea asp-for="Product.Description" class="form-control"></textarea>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-4">
                    <label asp-for="Product.ListPrice"></label>
                </div>
                <div class="col-8">
                    <input asp-for="Product.ListPrice" class="form-control">
                    <span asp-validation-for="Product.ListPrice" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-4">
                    <label asp-for="Product.Price"></label>
                </div>
                <div class="col-8">
                    <input asp-for="Product.Price" class="form-control">
                    <span asp-validation-for="Product.Price" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-4">
                    <label asp-for="Product.Price50"></label>
                </div>
                <div class="col-8">
                    <input asp-for="Product.Price50" class="form-control">
                    <span asp-validation-for="Product.Price50" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-4">
                    <label asp-for="Product.Price100"></label>
                </div>
                <div class="col-8">
                    <input asp-for="Product.Price100" class="form-control">
                    <span asp-validation-for="Product.Price100" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-4">
                    Category
                </div>
                <div class="col-8">
                    @Html.DropDownListFor(x => x.Product.CategoryId, Model.CategoryList, "Select a Category",
                   new { @class = "form-control" })
                    <span asp-validation-for="Product.CategoryId" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-4">
                    Cover Type
                </div>
                <div class="col-8">
                    @Html.DropDownListFor(x => x.Product.CoverTypeId, Model.CoveredTypeList, "Select a Cover Type",
                   new { @class = "form-control" })
                    <span asp-validation-for="Product.CoverTypeId" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-4">
                    Cover Type
                </div>
                <div class="col-8">
                    <input type="file" name="files" id="uploadBox" multiple class="form-control">
                </div>
            </div>
            <div class="form-group row">
                <div class="col-8 offset-4">
                    @if (Model.Product.Id != 0)
                    {
                        <partial name="_EditAndBackToListButton" model="@Model.Product.Id" />
                    }
                    else
                    {
                        <div class="row">
                            <div class="col">
                                <button type="submit" onClick="return validateInput()" class="btn btn-primary form-control">Create</button>
                            </div>
                            <div class="col">
                                <a asp-action="Index" class="btn btn-success form-control">Back To List</a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        @if (Model.Product.Id != 0)
        {
            <div class="col-3 offset-1 pt-4">
                <img src="@Model.Product.ImageUrl" width="100%" style="border-radius:5px;border:1px solid #bbb9b9"/>
            </div>
        }

    </div>
</form>

@section Scripts{

    <partial name="_ValidationScriptsPartial">
        <script src="https://cdn.tiny.cloud/1/830m0ihycilzsjylce8vhuf7m2v2txvwrpjgspjxbdhdtsz7/tinymce/5/tinymce.min.js"
                referrerpolicy="origin"></script>
        <script>
            tinymce.init({
                selector: 'textarea',
                plugins: 'a11ychecker advcode casechange formatpainter linkchecker autolink lists checklist media mediaembed pageembed permanentpen powerpaste table advtable tinycomments tinymcespellchecker',
                toolbar: 'a11ycheck addcomment showcomments casechange checklist code formatpainter pageembed permanentpen table',
                toolbar_mode: 'floating',
                tinycomments_mode: 'embedded',
                tinycomments_author: 'Author name',
            });

            function validateInput() {
                if (document.getElementById("uploadBox").value == "") {
                    swal("Error", "Please select an image", "error");
                    return false;
                }
                else {
                    return true;
                }
            }


        </script>
}


---------------------------------------------------------------


---------------------------------------------------------------


---------------------------------------------------------------


