Last thing that is Remaining in Category is Deleting a Category.

Opened CategoryController.cs

We will have an API Call for Delete. For Delete we need to Annotate with [HttpDelete]. Created the ActonMethod returning IActionResult, Delete having parameter id.

        [HttpDelete]
        public IActionResult Delete(int id)
        {

        }

Now first we will try to get the object from Database based on the id
var objFromDb = _unitOfWork.Category.Get(id);

Now if objFromDb will be null then we will return Json object with success false and with and error message.

            if (objFromDb == null)
            {
                return Json(new { success= false, message = "Error While Deleting" }); 
            }

If the control passes beyond if block means objFromDb is not null in this case we will use Remove method to delete and then Save, and return json object with success true and a success message. Overall the method is like:

        [HttpDelete]
        public IActionResult Delete(int id)
        {
            var objFromDb = _unitOfWork.Category.Get(id);
            if (objFromDb == null)
            {
                return Json(new { success= false, message = "Error While Deleting" }); 
            }
            _unitOfWork.Category.Remove(objFromDb);
            _unitOfWork.Save();
            return Json(new { success = true, message = "Delete Succesful" });
        }

Next we will work on the JS.

---------------------------------------------------------------
--CategoryController.js

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using BulkyBook.DataAccess.Repository.IRepository;
using BulkyBook.Models;
using Microsoft.AspNetCore.Mvc;

namespace BulkyBook.Areas.Admin.Controllers
{
    [Area("Admin")]
    public class CategoryController : Controller
    {
        private readonly IUnitOfWork _unitOfWork;
        public CategoryController(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Upsert(int? id)
        {
            Category category = new Category();
            if (id == null)
            {
                return View(category); ;
            }
            category = _unitOfWork.Category.Get(id.GetValueOrDefault());
            if (category == null)
            {
                return NotFound();
            }
            return View(category);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Upsert(Category category)
        {
            if (ModelState.IsValid)
            {
                if (category.Id == 0)
                {
                    _unitOfWork.Category.Add(category);
                }
                else
                {
                    _unitOfWork.Category.Update(category);
                }
                _unitOfWork.Save();
                return RedirectToAction(nameof(Index));

            }
            return View(category);
        }

        #region API Calls

        [HttpGet]
        public IActionResult GetAll()
        {
            var allObj = _unitOfWork.Category.GetAll();
            return Json(new { data = allObj });
        }

        [HttpDelete]
        public IActionResult Delete(int id)
        {
            var objFromDb = _unitOfWork.Category.Get(id);
            if (objFromDb == null)
            {
                return Json(new { success= false, message = "Error While Deleting" }); 
            }
            _unitOfWork.Category.Remove(objFromDb);
            _unitOfWork.Save();
            return Json(new { success = true, message = "Delete Succesful" });
        }

        #endregion
    }
}


---------------------------------------------------------------


---------------------------------------------------------------


---------------------------------------------------------------


