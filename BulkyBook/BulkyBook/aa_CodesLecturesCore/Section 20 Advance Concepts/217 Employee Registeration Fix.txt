Now we need to fix one thing.

Let's login as an Employee user. 

In the Users page I see employeeuser@gmail has the role Employee.

So logged in with this.

Go to User now and try to create a new user.

We do not see the Dropdowns for User Type. So we need to fix this.

Open Register.cshtml and Register.cshtml.cs

In the cshtml if we try to find Html.DropDownListFor

We see we have a check only for User.IsInRole for Admin.
@if (User.IsInRole(SD.Role_Admin))

We need to change it to 
@if (User.IsInRole(SD.Role_Admin) || User.IsInRole(SD.Role_Employee))

We also want to have the functionality like Employees will only be able to create employee user, they should not create Admin.

This change needs to be done in the .cs file Page Model.

Find the method OnGetAsync,

Here we are loading the roles. So here we need the condition for Roles.

So after the InputModel intialization we will have an if check for overriding Input.RoleList. We will use the same code for RoleList but here in the where clause we will check the role should be only CompanyUser like:


            if (User.IsInRole(SD.Role_Employee))
            {
                Input.RoleList = _roleManager.Roles.Where(x => x.Name == SD.Role_Employee).Select(x => x.Name).Select(i => new SelectListItem
                {
                    Text = i,
                    Value = i
                });
            };


Now run the solution and login as the same user. If we try to Register, we see the Role as only Employee in the DDL, and we Company DDL is working as earlier.

So this is working as expected.
---------------------------------------------------------------
Pushed the codes to Github.

--Register.cshtml
@page
@model RegisterModel
@using BulkyBook.Utility
@{
    ViewData["Title"] = "Register";
}

<div class="py-4 my-4">
    <div asp-validation-summary="All" class="text-danger"></div>
    <div class="row form-group">
        <div class="col-8 offset-2">
            <div class="card">
                <div class="card-body px-lg-5 pt-4">
                    <form autocomplete="off" asp-route-returnUrl="@Model.ReturnUrl" method="post">
                        <h3 class="col-12 text-success text-center py-4">
                            @if (User.IsInRole(SD.Role_Admin) || User.IsInRole(SD.Role_Employee))
                            {
                                <strong>Register an User Account</strong>
                            }
                            else
                            {
                                <strong>Sign Up</strong>
                            }
                        </h3>
                        <hr />
                        <div class="py-2">
                            <input asp-for="Input.Name" placeholder="Name" class="form-control" />
                            <span asp-validation-for="Input.Name" class="text-danger"></span>
                        </div>
                        <div class="py-2">
                            <input asp-for="Input.Email" type="email" placeholder="Email" class="form-control" />
                            <span asp-validation-for="Input.Email" class="text-danger"></span>
                        </div>
                        <div class="py-2 input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text">+1</span> 
                            </div>
                            <input asp-for="Input.PhoneNumber" type="text" placeholder="Phone Number" class="form-control" />
                            <span asp-validation-for="Input.PhoneNumber" class="text-danger"></span>
                        </div>
                        <div class="py-2">
                            <input asp-for="Input.StreetAddress" placeholder="Street Address" class="form-control" />
                            <span asp-validation-for="Input.StreetAddress" class="text-danger"></span>
                        </div>
                        <div class="py-2">
                            <input asp-for="Input.City" placeholder="City" class="form-control" />
                            <span asp-validation-for="Input.City" class="text-danger"></span>
                        </div>
                        <div class="form-row py-2">
                            <div class="col">
                                <input asp-for="Input.State" placeholder="State" class="form-control" />
                                <span asp-validation-for="Input.State" class="text-danger"></span>
                            </div>
                            <div class="col">
                                <input asp-for="Input.PostalCode" placeholder="Postal Code" class="form-control" />
                                <span asp-validation-for="Input.PostalCode" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="form-row py-2">
                            <div class="col">
                                <input asp-for="Input.Password" type="password" placeholder="Password" class="form-control" />
                                <span asp-validation-for="Input.Password" class="text-danger"></span>
                            </div>
                            <div class="col">
                                <input asp-for="Input.ConfirmPassword" type="password" placeholder="Confirm Password" class="form-control" />
                                <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
                            </div>
                        </div>
                        @if (User.IsInRole(SD.Role_Admin) || User.IsInRole(SD.Role_Employee))
                        {
                            <div class="form-group">
                                <label asp-for="Input.Role"></label>
                                @Html.DropDownListFor(m => m.Input.Role, Model.Input.RoleList,
                               "-Please select Role-", new { @class = "form-control" })
                            </div>
                            <div class="form-group">
                                <label asp-for="Input.CompanyId"></label>
                                @Html.DropDownListFor(m => m.Input.CompanyId, Model.Input.CompanyList,
                               "-Please select Company-", new { @class = "form-control" })
                            </div>
                        }

                        <div class="py-2">
                            <button type="submit" class="btn btn-success form-control">Register</button>
                        </div>
                    </form>

                    @if (!User.IsInRole(SD.Role_Admin) && !User.IsInRole(SD.Role_Employee))
                    {
                        <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                            <div class="row">
                                <p>
                                    By clicking <em>Register</em> you agree to our <a href="" target="_blank"> terms of service </a>
                                </p>
                                <hr />
                                <p>
                                    @foreach (var provider in Model.ExternalLogins)
                                    {
                                    <div class="col-6">
                                        @if (provider.Name.ToLower().Contains("facebook"))
                                        {
                                            <button type="submit" class="btn btn-block facebook-btn form-control"
                                                    name="provider" value="@provider.Name"
                                                    title="Log in using your @provider.DisplayName account">
                                                <i class="fab fa-facebook-square"></i> @provider.DisplayName
                                            </button>
                                        }
                                        else if (provider.Name.ToLower().Contains("google"))
                                        {
                                            <button type="submit" class="btn btn-block google-btn form-control"
                                                    name="provider" value="@provider.Name"
                                                    title="Log in using your @provider.DisplayName account">
                                                <i class="fab fa-google"></i> @provider.DisplayName
                                            </button>
                                        }
                                        else
                                        {
                                            <button type="submit" class="btn btn-primary" name="provider"
                                                    value="@provider.Name"
                                                    title="Log in using your @provider.DisplayName account">
                                                @provider.DisplayName
                                            </button>
                                        }
                                    </div>
                                    }
                                </p>
                            </div>
                        </form>
                    }

                </div>
            </div>
        </div>
    </div>
</div>



@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


--Register.cshtml.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
using BulkyBook.DataAccess.Repository.IRepository;
using BulkyBook.Models;
using BulkyBook.Utility;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;

namespace BulkyBook.Areas.Identity.Pages.Account
{
    [AllowAnonymous]
    public class RegisterModel : PageModel
    {
        private readonly SignInManager<IdentityUser> _signInManager;
        private readonly UserManager<IdentityUser> _userManager;
        private readonly ILogger<RegisterModel> _logger;
        private readonly IEmailSender _emailSender;
        private readonly RoleManager<IdentityRole> _roleManager;
        private readonly IUnitOfWork _unitOfWork;

        public RegisterModel(
            UserManager<IdentityUser> userManager,
            SignInManager<IdentityUser> signInManager,
            ILogger<RegisterModel> logger,
            IEmailSender emailSender,
            RoleManager<IdentityRole> roleManager,
            IUnitOfWork unitOfWork)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _logger = logger;
            _emailSender = emailSender;
            _roleManager = roleManager;
            _unitOfWork = unitOfWork;
        }

        [BindProperty]
        public InputModel Input { get; set; }

        public string ReturnUrl { get; set; }

        public IList<AuthenticationScheme> ExternalLogins { get; set; }

        public class InputModel
        {
            [Required]
            [EmailAddress]
            [Display(Name = "Email")]
            public string Email { get; set; }

            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
            [DataType(DataType.Password)]
            [Display(Name = "Password")]
            public string Password { get; set; }

            [DataType(DataType.Password)]
            [Display(Name = "Confirm password")]
            [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
            public string ConfirmPassword { get; set; }
            [Required]
            public string Name { get; set; }

            public string StreetAddress { get; set; }

            public string City { get; set; }

            public string State { get; set; }

            public string PostalCode { get; set; }

            public string PhoneNumber { get; set; }

            public string Role { get; set; }

            public int? CompanyId { get; set; }
            public IEnumerable<SelectListItem> CompanyList { get; set; }
            public IEnumerable<SelectListItem> RoleList { get; set; }

        }

        public async Task OnGetAsync(string returnUrl = null)
        {
            ReturnUrl = returnUrl;
            Input = new InputModel()
            {
                CompanyList = _unitOfWork.Company.GetAll().Select(i => new SelectListItem
                {
                    Text = i.Name,
                    Value = i.Id.ToString()
                }),
                RoleList = _roleManager.Roles.Where(x => x.Name != SD.Role_User_Indi).Select(x => x.Name).Select(i => new SelectListItem
                {
                    Text = i,
                    Value = i
                })
            };
            if (User.IsInRole(SD.Role_Employee))
            {
                Input.RoleList = _roleManager.Roles.Where(x => x.Name == SD.Role_Employee).Select(x => x.Name).Select(i => new SelectListItem
                {
                    Text = i,
                    Value = i
                });
            };


            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
        }

        public async Task<IActionResult> OnPostAsync(string returnUrl = null)
        {
            returnUrl = returnUrl ?? Url.Content("~/");
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
            if (ModelState.IsValid)
            {
                var user = new ApplicationUser
                {
                    UserName = Input.Email,
                    Email = Input.Email,
                    CompanyId = Input.CompanyId,
                    StreetAddress = Input.StreetAddress,
                    City = Input.City,
                    State = Input.State,
                    PostalCode = Input.PostalCode,
                    Name = Input.Name,
                    PhoneNumber = Input.PhoneNumber,
                    Role = Input.Role
                };
                var result = await _userManager.CreateAsync(user, Input.Password);
                if (result.Succeeded)
                {
                    _logger.LogInformation("User created a new account with password.");
                    if (!await _roleManager.RoleExistsAsync(SD.Role_Admin))
                    {
                        await _roleManager.CreateAsync(new IdentityRole(SD.Role_Admin));
                    }
                    if (!await _roleManager.RoleExistsAsync(SD.Role_Employee))
                    {
                        await _roleManager.CreateAsync(new IdentityRole(SD.Role_Employee));
                    }
                    if (!await _roleManager.RoleExistsAsync(SD.Role_User_Comp))
                    {
                        await _roleManager.CreateAsync(new IdentityRole(SD.Role_User_Comp));
                    }
                    if (!await _roleManager.RoleExistsAsync(SD.Role_User_Indi))
                    {
                        await _roleManager.CreateAsync(new IdentityRole(SD.Role_User_Indi));
                    }
                    if (user.Role == null)
                    {
                        await _userManager.AddToRoleAsync(user, SD.Role_User_Indi);
                    }
                    else
                    {
                        if (user.CompanyId > 0)
                        {
                            await _userManager.AddToRoleAsync(user, SD.Role_User_Comp);
                        }
                        await _userManager.AddToRoleAsync(user, user.Role);
                    }



                    var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                    code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                    var callbackUrl = Url.Page(
                        "/Account/ConfirmEmail",
                        pageHandler: null,
                        values: new { area = "Identity", userId = user.Id, code = code, returnUrl = returnUrl },
                        protocol: Request.Scheme);

                    await _emailSender.SendEmailAsync(Input.Email, "Confirm your email",
                        $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

                    if (_userManager.Options.SignIn.RequireConfirmedAccount)
                    {
                        return RedirectToPage("RegisterConfirmation", new { email = Input.Email, returnUrl = returnUrl });
                    }
                    else
                    {
                        if (user.Role == null)
                        {
                            await _signInManager.SignInAsync(user, isPersistent: false);
                            return LocalRedirect(returnUrl);
                        }
                        else
                        {
                            //admin is registering a new user.
                            return RedirectToAction("Index", "User", new { Area = "Admin" });
                        }
                    }
                }
                foreach (var error in result.Errors)
                {
                    ModelState.AddModelError(string.Empty, error.Description);
                }
            }

            Input = new InputModel()
            {
                CompanyList = _unitOfWork.Company.GetAll().Select(i => new SelectListItem
                {
                    Text = i.Name,
                    Value = i.Id.ToString()
                }),
                RoleList = _roleManager.Roles.Where(x => x.Name != SD.Role_User_Indi).Select(x => x.Name).Select(i => new SelectListItem
                {
                    Text = i,
                    Value = i
                })
            };


            // If we got this far, something failed, redisplay form
            return Page();
        }
    }
}


---------------------------------------------------------------


---------------------------------------------------------------


---------------------------------------------------------------


