Now we will fix some issues,

I donot have the Resend confirmation button(May be bcz I did not configure it as sendgrig was not sending emails), but he have shown that if he hit the Resend Email Confirmation link, he got some error on Object reference

The issue is in the method OnPostAsync, we are returning Page, and we were not initializing the ExternalLogins that we did in get. So before return Page copy pasted the below code from Get.

ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();

Now on running, his error was gone.

After this by running we have shown Forgot your password thing, by entering an email, and then clicked Submit, mail was sent to his registered email(sendgrid is not working for me) after that from the mail he opend the reset link of our portal then entered the email and password, confirm password again. and the password was reset.

Now another issue which was reproduced by me, if we provide an incorrect password and try to login, whe code breaks in cstml in foreach loop line for Model.ExternalLogins. And the issue is the same. We can fix it by copying the same ExteranlLogin line and paste it before the check of result.RequiresTwoFactor.

Now on running we see the error is gone.


---------------------------------------------------------------
Pushed the Codes to github.
--Login.cshtml.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;
using BulkyBook.DataAccess.Repository.IRepository;
using Microsoft.AspNetCore.Http;
using BulkyBook.Utility;

namespace BulkyBook.Areas.Identity.Pages.Account
{
    [AllowAnonymous]
    public class LoginModel : PageModel
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly SignInManager<IdentityUser> _signInManager;
        private readonly ILogger<LoginModel> _logger;
        private readonly IUnitOfWork _unitOfWork;

        public LoginModel(SignInManager<IdentityUser> signInManager,
            ILogger<LoginModel> logger,
            UserManager<IdentityUser> userManager,
            IUnitOfWork unitOfWork)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _logger = logger;
            _unitOfWork = unitOfWork;
        }

        [BindProperty]
        public InputModel Input { get; set; }

        public IList<AuthenticationScheme> ExternalLogins { get; set; }

        public string ReturnUrl { get; set; }

        [TempData]
        public string ErrorMessage { get; set; }

        public class InputModel
        {
            [Required]
            [EmailAddress]
            public string Email { get; set; }

            [Required]
            [DataType(DataType.Password)]
            public string Password { get; set; }

            [Display(Name = "Remember me?")]
            public bool RememberMe { get; set; }
        }

        public async Task OnGetAsync(string returnUrl = null)
        {
            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                ModelState.AddModelError(string.Empty, ErrorMessage);
            }

            returnUrl = returnUrl ?? Url.Content("~/");

            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();

            ReturnUrl = returnUrl;
        }

        public async Task<IActionResult> OnPostAsync(string returnUrl = null)
        {
            returnUrl = returnUrl ?? Url.Content("~/");
            if (ModelState.IsValid)
            {
                // This doesn't count login failures towards account lockout
                // To enable password failures to trigger account lockout, set lockoutOnFailure: true
                var result = await _signInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
                if (result.Succeeded)
                {
                    var user = _unitOfWork.ApplicationUser.GetFirstOrDefault(u => u.Email == Input.Email);
                    var count = _unitOfWork.ShoppingCart
                            .GetAll(x => x.ApplicationUserId == user.Id)
                            .Count();
                    HttpContext.Session.SetInt32(SD.ssShoppingCart, count);
                    _logger.LogInformation("User logged in.");
                    return LocalRedirect(returnUrl);
                }
                ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
                if (result.RequiresTwoFactor)
                {
                    return RedirectToPage("./LoginWith2fa", new { ReturnUrl = returnUrl, RememberMe = Input.RememberMe });
                }
                if (result.IsLockedOut)
                {
                    _logger.LogWarning("User account locked out.");
                    return RedirectToPage("./Lockout");
                }
                else
                {
                    ModelState.AddModelError(string.Empty, "Invalid login attempt.");
                    return Page();
                }
            }
            // If we got this far, something failed, redisplay form
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
            return Page();
        }
    }
}


---------------------------------------------------------------


---------------------------------------------------------------


---------------------------------------------------------------


