In the last part we added PageLinkTagHelper, now we will consume in our CategoryController.

Opened CategoryController. Index method.

Currently we are fetching every thing through our API calls. we will comment that.


Opened Index.cshtml from the Category view folder.

Commented the codes starting from the div with class p-4 border rounder till the end of the file including Scripts sectoin.

Now in the Index action, We need a combination for our Category model and our PagingInfo model. For that go to Models project, ViewModels folder and added the file CategoryVM.cs

Opened and made the class public. Created a property IEnumberable of Category named Categories

public IEnumerable<Category> Categories { get; set; }

Next Created a property for PaginInfo

public PagingInfo PagingInfo { get; set; }

So this is done.

Now back to CategoryController Index action.

Now for getting the categories from unit of work we need to call the GetAllAsync method as we have made the Repository async so changed the declaration of Index method to return async task like:

public async Task<IActionResult> Index()

Inside it tried to create an instance of CategoryVM and populate it's Categories property from unitOfWork GetAllAsync method like:

            CategoryVM categoryVM = new CategoryVM()
            {
                Categories = await _unitOfWork.Category.GetAllAsync()
            };

Now to the Index method, we will have a parameter int productPage this would be 1 by default

public async Task<IActionResult> Index(int productPage = 1)

Now, took the count of the Categories like:
var count = categoryVM.Categories.Count();

Next, we will populate categoryVM.Cateories based on the productPage parameter using Skip and Take functions and also sort based on Name, to show only the Categories of the corrosponding page.

            var count = categoryVM.Categories.Count();
            categoryVM.Categories = categoryVM.Categories.OrderBy(x => x.Name)
                .Skip((productPage - 1) * 2).Take(2).ToList();

Next we need to initalize the PagingInfo by setting a few properties like CurrentPage, ItemsPerPage, TotalItem and urlParam. We will set the urlParam as the url of this action and at the end set productPage=:, we will replace the colon(:) with the pagenumber.

It's 

            categoryVM.PagingInfo = new PagingInfo()
            {
                CurrentPage = productPage,
                ItemsPerPage = 2,
                TotalItem = count,
                urlParam = "/Admin/Category/Index?productPage=:"
            };


At the end we will return categoryVM back to the view.

return View(categoryVM);

In the next part we will configure Index View.
---------------------------------------------------------------

--CategoryVM.cs
using System;
using System.Collections.Generic;
using System.Text;

namespace BulkyBook.Models.ViewModels
{
    public class CategoryVM
    {
        public IEnumerable<Category> Categories { get; set; }
        public PagingInfo PagingInfo { get; set; }
    }
}


--Index.cshtml

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<br />
<div class="row">
    <div class="col-6">
        <h2 class="text-primary">Category List </h2>
    </div>
    <div class="col-6 text-right">
        <a class="btn btn-primary" asp-action="Upsert"><i class="fas fa-plus"></i> &nbsp; Create New Category</a>
    </div>
</div>

<br />
@*<div class="p-4 border rounded">
    <table id="tblData" class="table table-striped table-bordered" style="width:100%">
        <thead class="thead-dark">
            <tr class="table-info">
                <th>Name</th>
                <th></th>
            </tr>
        </thead>
    </table>
</div>


@section Scripts{ 
<script src="~/js/category.js"></script>
}*@

--CategoryController.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using BulkyBook.DataAccess.Repository.IRepository;
using BulkyBook.Models;
using BulkyBook.Models.ViewModels;
using BulkyBook.Utility;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace BulkyBook.Areas.Admin.Controllers
{
    [Area("Admin")]
    [Authorize(Roles = SD.Role_Admin)]
    public class CategoryController : Controller
    {
        private readonly IUnitOfWork _unitOfWork;
        public CategoryController(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        public async Task<IActionResult> Index(int productPage = 1)
        {
            CategoryVM categoryVM = new CategoryVM()
            {
                Categories = await _unitOfWork.Category.GetAllAsync()
            };
            var count = categoryVM.Categories.Count();
            categoryVM.Categories = categoryVM.Categories.OrderBy(x => x.Name)
                .Skip((productPage - 1) * 2).Take(2).ToList();

            categoryVM.PagingInfo = new PagingInfo()
            {
                CurrentPage = productPage,
                ItemsPerPage = 2,
                TotalItem = count,
                urlParam = "/Admin/Category/Index?productPage=:"
            };

            return View(categoryVM);
        }

        public async Task<IActionResult> Upsert(int? id)
        {
            Category category = new Category();
            if (id == null)
            {
                return View(category); ;
            }
            category = await _unitOfWork.Category.GetAsync(id.GetValueOrDefault());
            if (category == null)
            {
                return NotFound();
            }
            return View(category);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Upsert(Category category)
        {
            if (ModelState.IsValid)
            {
                if (category.Id == 0)
                {
                   await _unitOfWork.Category.AddAsync(category);
                }
                else
                {
                    _unitOfWork.Category.Update(category);
                }
                _unitOfWork.Save();
                return RedirectToAction(nameof(Index));

            }
            return View(category);
        }

        #region API Calls

        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var allObj = await _unitOfWork.Category.GetAllAsync();
            return Json(new { data = allObj });
        }

        [HttpDelete]
        public async Task<IActionResult> Delete(int id)
        {
            var objFromDb = await _unitOfWork.Category.GetAsync(id);
            if (objFromDb == null)
            {
                return Json(new { success= false, message = "Error While Deleting" }); 
            }
            await _unitOfWork.Category.RemoveAsync(objFromDb);
            _unitOfWork.Save();
            return Json(new { success = true, message = "Delete Succesful" });
        }

        #endregion
    }
}

---------------------------------------------------------------


---------------------------------------------------------------


---------------------------------------------------------------


