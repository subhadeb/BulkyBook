Now we will Modify the Order Statuses.

So we will create action methods in the controllers and the status change can only be done by admin and employee.

So OrdersController will have a different authorization.


So the would add Authorize at an ActionMethod level. First Created the StartProcessing with param int id method for Role Admin + Employee separated with comma.

Inside it first we will retrieve the OrderHeader based on the id in a variable orderHeader. and then we set orderHeader.OrderStatus as InProcess. Call Save() and at last redirect to Index.


       [Authorize(Roles = SD.Role_Admin + "," + SD.Role_Employee)]
        public IActionResult StartProcessing(int id)
        {
            OrderHeader orderHeader = _unitOfWork.OrderHeader.GetFirstOrDefault(x => x.Id == id);
            orderHeader.OrderStatus = SD.StatusInProcess;
            _unitOfWork.Save();
            return RedirectToAction(nameof(Index));
        }

In Details.cshtml we have the below codes to analyze:
                                @if (Model.OrderHeader.OrderStatus == SD.StatusInProcess)
                                {
                                    <input type="submit" value="Ship Order" onclick="validateInput"
                                           class="btn btn-primary form-control"
                                           formaction="/Amin/Order/ShipOrder" formmethod="post" />
                                }

We would be handling the post here. 


So StartProocessing is Done. No we will create the Post for ShipOrder. Copy pasted the codes of StartProcessing  modified the Method to ShipOrder it has a parameter id. It will also have the same Authorize and it would have [HttpPost] attribut.
Inside this method we will retrieve OrderHeader and will manipulate few properties. First we will update the TrackingNumber. We will take help of OrderVM that we Binded in the Controlloer with BindProperty Attribute. As of now it is like:

        [HttpPost]
        [Authorize(Roles = SD.Role_Admin + "," + SD.Role_Employee)]
        public IActionResult ShipOrder(int id)
        {
            OrderHeader orderHeader = _unitOfWork.OrderHeader.GetFirstOrDefault(u => u.Id == id);
            orderHeader.TrackingNumber = OrderVM.OrderHeader.TrackingNumber;
        }


Did the same for Carrier, next set the OrderStatus as Shipped and the set Shipping Date as Now. And then Save() and Redirect to Index.

            orderHeader.TrackingNumber = OrderVM.OrderHeader.TrackingNumber;
            orderHeader.Carrier = OrderVM.OrderHeader.TrackingNumber;
            orderHeader.OrderStatus = SD.StatusShipped;
            orderHeader.ShippingDate = DateTime.Now;

            _unitOfWork.Save();
            return RedirectToAction(nameof(Index));

Now we will work on Cancel Order. Made a copy of StartProcessing again and renamed method to CancelOrder. We want to have a default scenario that would refund the money back. For this we need to use stripe again. We will refund only if the status is approved. So after fetching orderHeader, the next thing we would do is have an if check to see if Payment status is approved.

        public IActionResult CancelOrder(int id)
        {
            OrderHeader orderHeader = _unitOfWork.OrderHeader.GetFirstOrDefault(x => x.Id == id);
            if (orderHeader.PaymentStatus == SD.PaymentStatusApproved)
            { 
            
            }

Inside it we will create a variable options as an object of RefundCreateOptions. The Amount in the object would be OrderTotal of OrderHeader multipled to 100 and then convert that to Int32, Then set the Reason as RefundReason.RequestedByCustomer and lastly, we need to send Charge as the Transaction id to send the refund back. 

                var options = new RefundCreateOptions
                {
                    Amount = Convert.ToInt32(orderHeader.OrderTotal * 100),
                    Reason = RefundReasons.RequestedByCustomer,
                    Charge = orderHeader.TransactionId
                };


after this we will initalize RefundService, and call Create passing the options like:

var service = new RefundService();
Refund refund = service.Create(options);

Next, we will set the OrderStatus as Refunded like:
orderHeader.OrderStatus = SD.StatusRefunded;

Next we would set the paymentstatus as status refunded.
orderHeader.PaymentStatus = SD.StatusRefunded;

In the else block(of status Approved)

We will set the order status as StatusCancelled and PaymentStatus as StatusCancelled. 


At the end if the below line would exist, remove it
orderHeader.OrderStatus = SD.StatusInProcess;

And Save and Redirect to index at the end would remain as it is.

So we have implemented three methods.
---------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using BulkyBook.DataAccess.Repository.IRepository;
using BulkyBook.Models;
using BulkyBook.Models.ViewModels;
using BulkyBook.Utility;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Stripe;

namespace BulkyBook.Areas.Admin.Controllers
{
    [Area("Admin")]
    [Authorize]
    public class OrderController : Controller
    {
        private readonly IUnitOfWork _unitOfWork;

        [BindProperty]
        public OrderDetailsVM OrderVM { get; set; }

        public OrderController(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }
        public IActionResult Index()
        {
            return View();
        }
        public IActionResult Details(int id)
        {
            OrderVM = new OrderDetailsVM()
            {
                OrderHeader = _unitOfWork.OrderHeader.GetFirstOrDefault(u => u.Id == id,
                                                includeProperties: "ApplicationUser"),
                OrderDetails = _unitOfWork.OrderDetails.GetAll(o => o.OrderId == id, includeProperties: "Product")

            };
            return View(OrderVM);
        }

        [Authorize(Roles = SD.Role_Admin + "," + SD.Role_Employee)]
        public IActionResult StartProcessing(int id)
        {
            OrderHeader orderHeader = _unitOfWork.OrderHeader.GetFirstOrDefault(x => x.Id == id);
            orderHeader.OrderStatus = SD.StatusInProcess;
            _unitOfWork.Save();
            return RedirectToAction(nameof(Index));
        }
        [HttpPost]
        [Authorize(Roles = SD.Role_Admin + "," + SD.Role_Employee)]
        public IActionResult ShipOrder(int id)
        {
            OrderHeader orderHeader = _unitOfWork.OrderHeader.GetFirstOrDefault(u => u.Id == id);
            orderHeader.TrackingNumber = OrderVM.OrderHeader.TrackingNumber;
            orderHeader.Carrier = OrderVM.OrderHeader.TrackingNumber;
            orderHeader.OrderStatus = SD.StatusShipped;
            orderHeader.ShippingDate = DateTime.Now;

            _unitOfWork.Save();
            return RedirectToAction(nameof(Index));
        }

        [Authorize(Roles = SD.Role_Admin + "," + SD.Role_Employee)]
        public IActionResult CancelOrder(int id)
        {
            OrderHeader orderHeader = _unitOfWork.OrderHeader.GetFirstOrDefault(x => x.Id == id);
            if (orderHeader.PaymentStatus == SD.PaymentStatusApproved)
            {
                var options = new RefundCreateOptions
                {
                    Amount = Convert.ToInt32(orderHeader.OrderTotal * 100),
                    Reason = RefundReasons.RequestedByCustomer,
                    Charge = orderHeader.TransactionId
                };
                var service = new RefundService();
                Refund refund = service.Create(options);
                orderHeader.OrderStatus = SD.StatusRefunded;
                orderHeader.PaymentStatus = SD.StatusRefunded;
            }
            else
            {
                orderHeader.OrderStatus = SD.StatusCancelled;
                orderHeader.PaymentStatus = SD.StatusCancelled;
            }
            _unitOfWork.Save();
            return RedirectToAction(nameof(Index));
        }

        #region API Calls

        [HttpGet]
        public IActionResult GetOrderList(string status)
        {
            var claimsIdentity = (ClaimsIdentity)User.Identity;
            var claim = claimsIdentity.FindFirst(ClaimTypes.NameIdentifier);

            IEnumerable<OrderHeader> orderHeaderList;

            if (User.IsInRole(SD.Role_Admin) || User.IsInRole(SD.Role_Employee))
            {
                orderHeaderList = _unitOfWork.OrderHeader.GetAll(includeProperties: "ApplicationUser");
            }
            else
            {
                orderHeaderList = _unitOfWork.OrderHeader.GetAll(
                    x => x.ApplicationUserId == claim.Value, includeProperties: "ApplicationUser");
            }
            switch (status)
            {
                case "pending":
                    orderHeaderList = orderHeaderList.Where(o => o.PaymentStatus == SD.PaymentStatusDelayedPayment);
                    break;
                case "inprocess":
                    orderHeaderList = orderHeaderList.Where(o => o.OrderStatus == SD.StatusApproved ||
                                                            o.OrderStatus == SD.StatusInProcess ||
                                                            o.OrderStatus == SD.StatusPending);
                    break;
                case "completed":
                    orderHeaderList = orderHeaderList.Where(o => o.OrderStatus == SD.StatusShipped);
                    break;
                case "rejected":
                    orderHeaderList = orderHeaderList.Where(o => o.OrderStatus == SD.StatusCancelled ||
                                                            o.OrderStatus == SD.StatusRefunded ||
                                                            o.OrderStatus == SD.PaymentStatusRejected);
                    break;
                default:
                    break;
            }


            return Json(new { data = orderHeaderList });
        }
        #endregion

    }
}

---------------------------------------------------------------


---------------------------------------------------------------


---------------------------------------------------------------

Jor is Add.


