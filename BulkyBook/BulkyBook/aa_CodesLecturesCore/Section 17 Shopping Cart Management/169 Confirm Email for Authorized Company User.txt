Opened Register.cshtml.cs from Identity Area.

We see in the method OnPostAsync, we have the code for GenerateEmailConfirmationTokenAsync. 

We can copy the below codes startin from var code = await ... till await _emailSender... and paste


Now in CartController, Added a method IndexPost() for Post and the reason we added it because the Index.cshtml is having form post and we have the button for submit. It is async method retruning Task<IActionResult> with attribute [HttpPost], and as the Name is different we can set the ActionName in the attribute [ActionName("Index")]. And  and pasted the copied codes.


We need the email id of the logged in user, so copie the two lines of claimsIdentity code from the index get method and pasted at the top.

            var claimsIdentity = (ClaimsIdentity)User.Identity;
            var claim = claimsIdentity.FindFirst(ClaimTypes.NameIdentifier);

We get the user object from the database with the below code:
var user = _unitOfWork.ApplicationUser.GetFirstOrDefault(u => u.Id == claim.Value);

Now we will add an if condition, like if the user is null we will add an error in the ModelState with message verification email is empty

            if (user == null)
            {
                ModelState.AddModelError(string.Empty, "Verification Email is Empty");
            }

Now there will be pasted code and now we will be resolving the build errors. Did control dot on WebEncoders, Encoding and HtmlEncoder and added the pacakge. 

Removed the code: , returnUrl = returnUrl from values.

Updated Input.Email to user.Email

At the end we will add a model state error saying Verification email sent and then redirect to index action.

            ModelState.AddModelError(string.Empty, "Verification Email Sent, Please check email");
            return RedirectToAction("Index");

Now Let's test our changes and I am quit sure email will not be send by SendGrid But still...

Logged in as admin, Go to Users tab, create a new user with a valid gmail, added the Role as Company Customer and selected the CompanyId was Big Company(It's an authorized company)

Clicked Register.

Now logged in as the new user. Add item to the cart. Go to cart, and we see Email Must be confirmed for authorized customers! Clicked Resend orange button(And debugged also) but no email was sent for me due to sendgrid issue. I think I can update the DB column from the backend, and if required I will do from the backed with update query.

---------------------------------------------------------------
--CartController
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
using BulkyBook.DataAccess.Repository.IRepository;
using BulkyBook.Models;
using BulkyBook.Models.ViewModels;
using BulkyBook.Utility;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;

namespace BulkyBook.Areas.Customer.Controllers
{
    [Area("Customer")]
    public class CartController : Controller
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IEmailSender _emailSender;
        private readonly UserManager<IdentityUser> _userManager;

        public ShoppingCartVM ShoppingCartVM { get; set; }
        public CartController(IUnitOfWork unitOfWork, IEmailSender emailSender,UserManager<IdentityUser> userManager)
        {
            _unitOfWork = unitOfWork;
            _emailSender = emailSender;
            _userManager = userManager;
        }

        public IActionResult Index()
        {
            var claimsIdentity = (ClaimsIdentity)User.Identity;
            var claim = claimsIdentity.FindFirst(ClaimTypes.NameIdentifier);


            ShoppingCartVM = new ShoppingCartVM()
            {
                OrderHeader = new OrderHeader(),
                ListCart = _unitOfWork.ShoppingCart.GetAll(x=>x.ApplicationUserId == claim.Value, includeProperties: "Product")
            };
            ShoppingCartVM.OrderHeader.OrderTotal = 0;
            ShoppingCartVM.OrderHeader.ApplicationUser = _unitOfWork.ApplicationUser
                                                    .GetFirstOrDefault(x=>x.Id == claim.Value, 
                                                    includeProperties: "Company");
            foreach (var item in ShoppingCartVM.ListCart)
            {
                item.Price = SD.GetPriceBasedOnQuantity(item.Count, item.Product.Price, item.Product.Price50, item.Product.Price100);
                ShoppingCartVM.OrderHeader.OrderTotal += (item.Price * item.Count);
                item.Product.Description = SD.ConvertToRawHtml(item.Product.Description);
                if (item.Product.Description.Length > 100)
                {
                    item.Product.Description = item.Product.Description.Substring(0, 99) + "...";
                }
            }
            return View(ShoppingCartVM);
        }
        [HttpPost]
        [ActionName("Index")]
        public async Task<IActionResult> IndexPost()
        {
            var claimsIdentity = (ClaimsIdentity)User.Identity;
            var claim = claimsIdentity.FindFirst(ClaimTypes.NameIdentifier);

            var user = _unitOfWork.ApplicationUser.GetFirstOrDefault(u => u.Id == claim.Value);
            if (user == null)
            {
                ModelState.AddModelError(string.Empty, "Verification Email is Empty");
            }

            var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = Url.Page(
                "/Account/ConfirmEmail",
                pageHandler: null,
                values: new { area = "Identity", userId = user.Id, code = code },
                protocol: Request.Scheme);

            await _emailSender.SendEmailAsync(user.Email, "Confirm your email",
                $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

            ModelState.AddModelError(string.Empty, "Verification Email Sent, Please check email");
            return RedirectToAction("Index");
        }


    }
}

---------------------------------------------------------------


---------------------------------------------------------------


---------------------------------------------------------------


