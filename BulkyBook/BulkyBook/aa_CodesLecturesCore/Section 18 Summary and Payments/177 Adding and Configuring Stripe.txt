Now it's time for a new Challenging thing.

When the User would Place Order, we should set up stripe and on valid payment we should let the user move ahead.

First we need to install stripe in our project.

Go to tools nuget package manager and search Stripe.net
Install it in BulkyBook Project.

It is installed now go to Stripe.com

First we will create a stripe account.

After registering with hotmail account, It opened dasboard, a loader was running for Activating your Stripe India beta invite!, after waiting for 5 mins clicked Get Started.

Gone to mail inbox and Verified the account.

Next in the portal clicked Activate your Stripe account Start Now button

Next in the Portal clicked Developers from the Left.

There under API Keys we have Publishable key and Secret key.

Now opened appsettings.json, here we have two sendGridKeys, now we will add a separate element for stripe(we could have used like sendgrid as well but for separation we did this). Pasted the two keys like:

   "Stripe": {
    "SecretKey": "sk_test_...",
    "PublishableKey": "pk_test_..."
  }

So now we will create a class named stripe settings and add these two properties.

So in Utility project, created a class StripeSettings.cs made it public and the two properies are same as the one we declared in appsettings.json

        public string SecretKey { get; set; }
        public string PublishableKey { get; set; }

Now open Starup.cs
In ConfigureServices, After services.Configure<EmailOptions>(Configuration) we need to get the Key from Configuration and it's not present directly it's present in the section Strip so added:

services.Configure<StripeSettings>(Configuration.GetSection("Stripe"));

Now we will add stripe to Middlewares.
So in Configure after UseRouting, added the below(dont know why he did not add app.)

We will continue in the next part.


---------------------------------------------------------------
--appsettings.json
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=SUKLA\\SQLEXPRESS;Database=BulkyBook;Trusted_Connection=True;MultipleActiveResultSets=true",
    "Win10DefaultConnection": "Server=USMUMSUBDEB3\\SQLEXPRESS;Database=BulkyBook;Trusted_Connection=True;MultipleActiveResultSets=true"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*",
  "SendGridKey": "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",
  "SendGridUser": "BulkyBook",
  "Stripe": {
    "SecretKey": "sk_test_51HqVhWKjdIQzDW3r6bPMs28IQ1g8A5XXMNnyofqLkmVIxoaBavedcW8XVGuAtZ5oo8w3GqjyvXrfHoYyC1yHGtvh00oaP0wZ78",
    "PublishableKey": "pk_test_51HqVhWKjdIQzDW3r1NF4u6DbS0eAvbn9HJnQAKemHcDkS1dbMY5viBotxCBAmxwGe6sCi2KtjQI9dqrqMwtXCCOB00OQzp57lS"
  }
}


--StripeSettings.cs
using System;
using System.Collections.Generic;
using System.Text;

namespace BulkyBook.Utility
{
    public class StripeSettings
    {
        public string SecretKey { get; set; }
        public string PublishableKey { get; set; }
    }
}

--Starup.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using BulkyBook.DataAccess.Data;
using BookListRazor.Constants;
using BulkyBook.DataAccess.Repository;
using BulkyBook.DataAccess.Repository.IRepository;
using Microsoft.AspNetCore.Identity.UI.Services;
using BulkyBook.Utility;
using Stripe;

namespace BulkyBook
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            if (Environment.MachineName == Constants.Win10MachineName)
            {
                services.AddDbContext<ApplicationDbContext>(options =>
              options.UseSqlServer(
                  Configuration.GetConnectionString("Win10DefaultConnection")));
            }
            else
            {
                services.AddDbContext<ApplicationDbContext>(options =>
              options.UseSqlServer(
                  Configuration.GetConnectionString("DefaultConnection")));
            }


            services.AddIdentity<IdentityUser, IdentityRole>().AddDefaultTokenProviders()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            services.AddSingleton<IEmailSender, EmailSender>();
            services.Configure<EmailOptions>(Configuration);
            services.Configure<StripeSettings>(Configuration.GetSection("Stripe"));

            services.AddScoped<IUnitOfWork, UnitOfWork>();
            services.AddControllersWithViews().AddRazorRuntimeCompilation();
            services.AddRazorPages();
            services.ConfigureApplicationCookie(options =>
            {
                options.LoginPath = $"/Identity/Account/Login";
                options.LogoutPath = $"/Identity/Account/Logout";
                options.AccessDeniedPath = $"/Identity/Account/AccessDenied";
            });
            services.AddAuthentication().AddFacebook(options =>
            {
                options.AppId = "2859494254281667";
                options.AppSecret = "7a6cba804bd8cd880ad3539337b74469";
            });
            services.AddAuthentication().AddGoogle(options =>
            {
                options.ClientId = "246232864900-ifabvjm0ck8dpn0dnnf7v8f85htjifrs.apps.googleusercontent.com";
                options.ClientSecret = "lKFA1HjDcorcq3KJZdj4-75v";
            });
            services.AddSession(options =>
            {
                options.IdleTimeout = TimeSpan.FromMinutes(30);
                options.Cookie.HttpOnly = true;
                options.Cookie.IsEssential = true;
            });

        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                //app.UseDatabaseErrorPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }
            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();
            StripeConfiguration.ApiKey = Configuration.GetSection("Stripe")["SecretKey"];
            app.UseSession();

            app.UseAuthentication();
            app.UseAuthorization();


            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{area=Customer}/{controller=Home}/{action=Index}/{id?}");
                endpoints.MapRazorPages();
            });
        }
    }
}


---------------------------------------------------------------


---------------------------------------------------------------


---------------------------------------------------------------


