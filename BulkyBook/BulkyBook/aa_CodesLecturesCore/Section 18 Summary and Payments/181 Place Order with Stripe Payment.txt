Before we make changes fixed a small performance bug. Currently in SummaryPost, we are calling _unitOfWork.Save(); twice one inside the loop(performance hit) and another outside the loop. for 10List Cart items the Save will be called 10 times, so we can remove the save() call inside the loop, the Save outside it will be sufficient. so removed _unitOfWork.Save(); from inside the foreach.


Now we will Place order with our payment portal. Gone to Summary.cshtml and uncommented the codes for stripe script codes.

In SummaryPost we will have a parameter of type string that stripe will return and it's named as stripeToken.

After processing stripe returns a token that we can use to process the transaction. In the method before RedirectToAction at the end we will have a check if stripeToken is null, the else block means payment is done. In the elso block did the code first. We have to initialize a class available in stripe called ChargeCreateOptions, there we need to set Ammount(based on OrderTotal), Currency made it usd, Description, Source is the stripeToken. So as of now it's like:

[One thing to note, he used usd for Currently that was giving error, I googled and made it 'inr' it worked]


            if (stripeToken == null)
            {

            }
            else
            {
                var options = new ChargeCreateOptions()
                {
                    Amount = Convert.ToInt32(ShoppingCartVM.OrderHeader.OrderTotal * 100),
                    Currency = "inr",
                    Description = "Order ID: " + ShoppingCartVM.OrderHeader.Id,
                    Source = stripeToken
                };
            }


Next(in the else block), We would initialize a class ChargeService, and then Charge based on that and the Options like:
                var service = new ChargeService();
                Charge charge = service.Create(options);

After this we will have an if check, if charge.BalanceTransactionId is null it means there was some issue in payment. So in this blcok we will set the PaymentStatus as PaymentRejected, else we will set the TrasactionId as charge.TransactionId

                if (charge.BalanceTransactionId == null)
                {
                    ShoppingCartVM.OrderHeader.PaymentStatus = SD.PaymentStatusRejected;
                }
                else
                {
                    ShoppingCartVM.OrderHeader.TransactionId = charge.BalanceTransactionId;
                }


Next, we will have a check for charge.status and if it is(to lower) succeeded, we will update few details like PaymentStutus to Approved, OrderStatus to Approved, PaymentDate as Now.
 
                if (charge.Status.ToLower() == "succeeded")
                {
                    ShoppingCartVM.OrderHeader.PaymentStatus = SD.PaymentStatusApproved;
                    ShoppingCartVM.OrderHeader.OrderStatus = SD.StatusApproved;
                    ShoppingCartVM.OrderHeader.PaymentDate = DateTime.Now;
                }


Next called _unitOfWork.Save()

Now Run the solution. Add three items with one item having count greater than 1. 

Gone to summary and Clicked Place order. At the top right we can see we have an URL for Test mode. And it opened the url
https://stripe.com/docs/testing#cards

It has some Card Numbers and for Visa it was
4242424242424242

So in the Stripe popup, set the email, paste the card number, we can use any Expiry Date(Of future) and CVV. Clicked Pay Button, a message came it was successful. :)

IN debugging, SummaryPost Action was hit with a stripeToken. while debuggin, options was populated with Amount, Description and source as expected.

[With Currency = "usd", I got an exception(Not him) in Charge charge = service.Create(options); saying:
Stripe.StripeException: 'As per Indian regulations, export transactions require a customer name and address. More info here: https://stripe.com/docs/india-exports'. FIxed it by making it inr]


Navigated to stripe portal and was able to see the transaction of today. In View details We have the date, charge order id etc. This is exactly what we want. So our payment was successful and it was even recorded.

In their portal it was like:
Payment details
Statement descriptor
Stripe
Amount
₹209.00
Fee
₹7.39

Net
₹201.61
Status
Succeeded
Cross-border classification
Description
Order ID: 4

This is cool.
---------------------------------------------------------------
Pushed the Codes to Github.

CartController.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
using BulkyBook.DataAccess.Repository.IRepository;
using BulkyBook.Models;
using BulkyBook.Models.ViewModels;
using BulkyBook.Utility;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Stripe;

namespace BulkyBook.Areas.Customer.Controllers
{
    [Area("Customer")]
    public class CartController : Controller
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IEmailSender _emailSender;
        private readonly UserManager<IdentityUser> _userManager;

        [BindProperty]
        public ShoppingCartVM ShoppingCartVM { get; set; }
        public CartController(IUnitOfWork unitOfWork, IEmailSender emailSender, UserManager<IdentityUser> userManager)
        {
            _unitOfWork = unitOfWork;
            _emailSender = emailSender;
            _userManager = userManager;
        }

        public IActionResult Index()
        {
            var claimsIdentity = (ClaimsIdentity)User.Identity;
            var claim = claimsIdentity.FindFirst(ClaimTypes.NameIdentifier);


            ShoppingCartVM = new ShoppingCartVM()
            {
                OrderHeader = new OrderHeader(),
                ListCart = _unitOfWork.ShoppingCart.GetAll(x => x.ApplicationUserId == claim.Value, includeProperties: "Product")
            };
            ShoppingCartVM.OrderHeader.OrderTotal = 0;
            ShoppingCartVM.OrderHeader.ApplicationUser = _unitOfWork.ApplicationUser
                                                    .GetFirstOrDefault(x => x.Id == claim.Value,
                                                    includeProperties: "Company");
            foreach (var item in ShoppingCartVM.ListCart)
            {
                item.Price = SD.GetPriceBasedOnQuantity(item.Count, item.Product.Price, item.Product.Price50, item.Product.Price100);
                ShoppingCartVM.OrderHeader.OrderTotal += (item.Price * item.Count);
                item.Product.Description = SD.ConvertToRawHtml(item.Product.Description);
                if (item.Product.Description.Length > 100)
                {
                    item.Product.Description = item.Product.Description.Substring(0, 99) + "...";
                }
            }
            return View(ShoppingCartVM);
        }
        [HttpPost]
        [ActionName("Index")]
        public async Task<IActionResult> IndexPost()
        {
            var claimsIdentity = (ClaimsIdentity)User.Identity;
            var claim = claimsIdentity.FindFirst(ClaimTypes.NameIdentifier);

            var user = _unitOfWork.ApplicationUser.GetFirstOrDefault(u => u.Id == claim.Value);
            if (user == null)
            {
                ModelState.AddModelError(string.Empty, "Verification Email is Empty");
            }

            var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = Url.Page(
                "/Account/ConfirmEmail",
                pageHandler: null,
                values: new { area = "Identity", userId = user.Id, code = code },
                protocol: Request.Scheme);

            await _emailSender.SendEmailAsync(user.Email, "Confirm your email",
                $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

            ModelState.AddModelError(string.Empty, "Verification Email Sent, Please check email");
            return RedirectToAction("Index");
        }

        public IActionResult Plus(int cartId)
        {
            var cart = _unitOfWork.ShoppingCart.GetFirstOrDefault
                            (c => c.Id == cartId, includeProperties: "Product");
            cart.Count += 1;
            cart.Price = SD.GetPriceBasedOnQuantity(cart.Count, cart.Product.Price,
                                    cart.Product.Price50, cart.Product.Price100);
            _unitOfWork.Save();
            return RedirectToAction(nameof(Index));
        }
        public IActionResult Minus(int cartId)
        {
            var cart = _unitOfWork.ShoppingCart.GetFirstOrDefault
                            (c => c.Id == cartId, includeProperties: "Product");
            if (cart.Count == 1)
            {
                var cnt = _unitOfWork.ShoppingCart.GetAll(u => u.ApplicationUserId == cart.ApplicationUserId).ToList().Count();
                _unitOfWork.ShoppingCart.Remove(cart);
                _unitOfWork.Save();
                HttpContext.Session.SetInt32(SD.ssShoppingCart, cnt - 1);
            }
            else
            {
                cart.Count -= 1;
                cart.Price = SD.GetPriceBasedOnQuantity(cart.Count, cart.Product.Price,
                                        cart.Product.Price50, cart.Product.Price100);
                _unitOfWork.Save();
            }
            return RedirectToAction(nameof(Index));
        }
        public IActionResult Remove(int cartId)
        {
            var cart = _unitOfWork.ShoppingCart.GetFirstOrDefault
                            (c => c.Id == cartId, includeProperties: "Product");
            var cnt = _unitOfWork.ShoppingCart.GetAll(u => u.ApplicationUserId == cart.ApplicationUserId).ToList().Count();
            _unitOfWork.ShoppingCart.Remove(cart);
            _unitOfWork.Save();
            HttpContext.Session.SetInt32(SD.ssShoppingCart, cnt - 1);
            return RedirectToAction(nameof(Index));
        }
        public IActionResult Summary()
        {
            var claimsIdentity = (ClaimsIdentity)User.Identity;
            var claim = claimsIdentity.FindFirst(ClaimTypes.NameIdentifier);
            ShoppingCartVM = new ShoppingCartVM()
            {
                OrderHeader = new OrderHeader(),
                ListCart = _unitOfWork.ShoppingCart.GetAll(x => x.ApplicationUserId == claim.Value, includeProperties: "Product")
            };
     
            ShoppingCartVM.OrderHeader.ApplicationUser = _unitOfWork.ApplicationUser.GetFirstOrDefault(x => x.Id == claim.Value,
                                                            includeProperties: "Company");

            foreach (var item in ShoppingCartVM.ListCart)
            {
                item.Price = SD.GetPriceBasedOnQuantity(item.Count, item.Product.Price, item.Product.Price50, item.Product.Price100);
                ShoppingCartVM.OrderHeader.OrderTotal += (item.Price * item.Count);
                item.Product.Description = SD.ConvertToRawHtml(item.Product.Description);
            }
            ShoppingCartVM.OrderHeader.Name = ShoppingCartVM.OrderHeader.ApplicationUser.Name;
            ShoppingCartVM.OrderHeader.PhoneNumber = ShoppingCartVM.OrderHeader.ApplicationUser.PhoneNumber;
            ShoppingCartVM.OrderHeader.City = ShoppingCartVM.OrderHeader.ApplicationUser.City;
            ShoppingCartVM.OrderHeader.State = ShoppingCartVM.OrderHeader.ApplicationUser.State;
            ShoppingCartVM.OrderHeader.StreetAddress = ShoppingCartVM.OrderHeader.ApplicationUser.StreetAddress;
            ShoppingCartVM.OrderHeader.PostalCode = ShoppingCartVM.OrderHeader.ApplicationUser.PostalCode;
            return View(ShoppingCartVM);
        }
        [HttpPost]
        [ActionName("Summary")]
        [ValidateAntiForgeryToken]
        public IActionResult SummaryPost(string stripeToken)
        {
            var claimsIdentity = (ClaimsIdentity)User.Identity;
            var claim = claimsIdentity.FindFirst(ClaimTypes.NameIdentifier);

            ShoppingCartVM.OrderHeader.ApplicationUser = _unitOfWork.ApplicationUser.GetFirstOrDefault(x => x.Id == claim.Value,
                                                            includeProperties: "Company");
            ShoppingCartVM.ListCart = _unitOfWork.ShoppingCart.GetAll(x => x.ApplicationUserId == claim.Value, includeProperties: "Product");
            ShoppingCartVM.OrderHeader.PaymentStatus = SD.PaymentStatusPending;
            ShoppingCartVM.OrderHeader.OrderStatus = SD.StatusPending;
            ShoppingCartVM.OrderHeader.ApplicationUserId = claim.Value;
            ShoppingCartVM.OrderHeader.OrderDate = DateTime.Now;

            _unitOfWork.OrderHeader.Add(ShoppingCartVM.OrderHeader);
            _unitOfWork.Save();
            List<OrderDetails> orderDetailsList = new List<OrderDetails>();
            foreach (var item in ShoppingCartVM.ListCart)
            {
                item.Price = SD.GetPriceBasedOnQuantity(item.Count,item.Product.Price, item.Product.Price50, item.Product.Price100);
                OrderDetails orderDetails = new OrderDetails()
                {
                    ProductId = item.ProductId,
                    OrderId = ShoppingCartVM.OrderHeader.Id,
                    Price = item.Price,
                    Count = item.Count
                };
                ShoppingCartVM.OrderHeader.OrderTotal += orderDetails.Count * orderDetails.Price;
                _unitOfWork.OrderDetails.Add(orderDetails);
            }
            _unitOfWork.ShoppingCart.RemoveRange(ShoppingCartVM.ListCart);
            _unitOfWork.Save();
            HttpContext.Session.SetInt32(SD.ssShoppingCart,0);

            if (stripeToken == null)
            {

            }
            else
            {
                var options = new ChargeCreateOptions()
                {
                    Amount = Convert.ToInt32(ShoppingCartVM.OrderHeader.OrderTotal * 100),
                    Currency = "inr",
                    Description = "Order ID: " + ShoppingCartVM.OrderHeader.Id,
                    Source = stripeToken
                };
                var service = new ChargeService();
                Charge charge = service.Create(options);
                if (charge.BalanceTransactionId == null)
                {
                    ShoppingCartVM.OrderHeader.PaymentStatus = SD.PaymentStatusRejected;
                }
                else
                {
                    ShoppingCartVM.OrderHeader.TransactionId = charge.BalanceTransactionId;
                }
                if (charge.Status.ToLower() == "succeeded")
                {
                    ShoppingCartVM.OrderHeader.PaymentStatus = SD.PaymentStatusApproved;
                    ShoppingCartVM.OrderHeader.OrderStatus = SD.StatusApproved;
                    ShoppingCartVM.OrderHeader.PaymentDate = DateTime.Now;
                }
                _unitOfWork.Save();

            }
            return RedirectToAction("OrderConfirmation", "Cart", new { id = ShoppingCartVM.OrderHeader.Id });
        }

        public IActionResult OrderConfirmation(int id)
        {
            return View(id);
        }

    }
}

--Summary.cshtml
@model BulkyBook.Models.ViewModels.ShoppingCartVM
@using Microsoft.Extensions.Options

@inject IOptions<BulkyBook.Utility.StripeSettings> Stripe

<form method="post">
    <br />
    <div class="backgroundWhiteBorder">
        <div class="container">
            <div class="card">
                <div class="card-header bg-dark text-light ml-0 row container">
                    <div class="col-6">
                        <i class="fa fa-shopping-cart"></i> &nbsp;
                        Order Summary
                    </div>
                    <div class="col-6 text-right">
                        <a asp-area="Customer" asp-controller="Cart" asp-action="Index" class="btn btn-outline-info btn-sm">Back to Cart</a>
                    </div>
                </div>
                <div class="card-body">
                    <div class="container rounded p-2">
                        <div class="row">
                            <div class="col-12 col-lg-6 pb-4">
                                <div class="row">
                                    <h4 class="d-flex justify-content-between align-items-center mb-3">
                                        <span class="text-info">PickUp Details:</span>
                                    </h4>
                                </div>
                                <div class="row my-1">
                                    <div class="col-3">
                                        <label>Name</label>
                                    </div>
                                    <div class="col-9">
                                        <input asp-for="OrderHeader.Name" type="text" class="form-control" />
                                    </div>
                                </div>
                                <div class="row my-1">
                                    <div class="col-3">
                                        <label>Phone</label>
                                    </div>
                                    <div class="col-9">
                                        <input asp-for="OrderHeader.PhoneNumber" type="text" class="form-control" />
                                    </div>
                                </div>
                                <div class="row my-1">
                                    <div class="col-3">
                                        <label>Street Address</label>
                                    </div>
                                    <div class="col-9">
                                        <input asp-for="OrderHeader.StreetAddress" type="text" class="form-control" />
                                    </div>
                                </div>
                                <div class="row my-1">
                                    <div class="col-3">
                                        <label>City</label>
                                    </div>
                                    <div class="col-9">
                                        <input asp-for="OrderHeader.City" type="text" class="form-control" />
                                    </div>
                                </div>
                                <div class="row my-1">
                                    <div class="col-3">
                                        <label>State</label>
                                    </div>
                                    <div class="col-9">
                                        <input asp-for="OrderHeader.State" type="text" class="form-control" />
                                    </div>
                                </div>
                                <div class="row my-1">
                                    <div class="col-3">
                                        <label>Postal Code</label>
                                    </div>
                                    <div class="col-9">
                                        <input asp-for="OrderHeader.PostalCode" type="text" class="form-control" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-12 col-lg-5 offset-lg-1">
                                <h4 class="d-flex justify-content-between align-items-center mb-3">
                                    <span class="text-info">Order Summary:</span>
                                </h4>
                                <ul class="list-group mb-3">
                                    @foreach (var item in Model.ListCart)
                                    {
                                        <li class="list-group-item d-flex justify-content-between">
                                            <div>
                                                <h6 class="my-0">@item.Product.Title</h6>
                                                <small class="text-muted">Quantity: @item.Count</small>
                                            </div>
                                            <span class="text-muted">$ @( item.Price * item.Count)</span>
                                        </li>
                                    }
                                    <li class="list-group-item d-flex justify-content-between bg-light">
                                        <small class="text-info">Total (USD)</small>
                                        <strong class="text-info">$ @(Model.OrderHeader.OrderTotal)</strong>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="row">
                        <div class="col-12 col-md-8 pt-2">
                            <p style="color:maroon; font-size:14px;">Estimate Arrival Date: @DateTime.Now.AddDays(7).ToShortDateString() - @DateTime.Now.AddDays(14).ToShortDateString()</p>
                        </div>
                        <div class="col-12 col-md-4">
                            @{
                                var OrderTotalFroStripe = Model.OrderHeader.OrderTotal * 100;
                            }
                            <script src="https://checkout.stripe.com/checkout.js" class="stripe-button"
                                    data-key="@Stripe.Value.PublishableKey"
                                    data-amount="@OrderTotalFroStripe"
                                    data-name="Bulky Book"
                                    data-label="Place Order"
                                    data-description="Get Books For Less"
                                    data-locale="auto"
                                    data-allow-remember-me="false"
                                    data-image="https://stripe.com/img/documentation/checkout/marketplace.png">
                            </script>
                            <script>
                                document.getElementsByClassName("stripe-button-el")[0].style.display = 'none'
                            </script>
                            <button type="submit" value="Place Order" class="btn btn-success form-control">Place Order</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>


---------------------------------------------------------------


---------------------------------------------------------------


---------------------------------------------------------------


