Now Opened SD.cs, we will have a method GetPriceBasedOnQuantity, that would have four parameters.

        public static double GetPriceBasedOnQuantity(double quantity, double price, double price50, double price100)
        { 
        
        }

Now inside, it first we will check if quantity is less than 50. then will return price, in the else part we will check if quantity is less than 100, then return price50, else return price100.(see code at the bottom after end of this part)

Now he copy pasted from somewhere, custom code to convert normal string to RawHtml. The method is:

This method will conver string to textual format for directly displaying it. This is similar to html.raw he said he will have it in the attachment(ConvertToRawHtml.txt). The contents of the method are:

public static string ConvertToRawHtml(string source)
        {
            char[] array = new char[source.Length];
            int arrayIndex = 0;
            bool inside = false;

            for (int i = 0; i < source.Length; i++)
            {
                char let = source[i];
                if (let == '<')
                {
                    inside = true;
                    continue;
                }
                if (let == '>')
                {
                    inside = false;
                    continue;
                }
                if (!inside)
                {
                    array[arrayIndex] = let;
                    arrayIndex++;
                }
            }
            return new string(array, 0, arrayIndex);
        }

Pasted the method.

Now in HomeController Details Post, we will use GetPriceBasedOnQuantity.

In the if check for cartFromDb == null, we will simply add the cartObject to the shopping cart like:
_unitOfWork.ShoppingCart.Add(cartObject);

in the else block. 
First we will updte the Count of cartObject by adding it to the count from db like and then update to the db:

                    cartObject.Count += cartFromDb.Count;
                    _unitOfWork.ShoppingCart.Update(cartObject);

After the if and else block ends. we would save _unitOfWork and then ridirect to Index like:
                _unitOfWork.Save();
                return RedirectToAction(nameof(Index));

Now run the application.

Logged in as admin

Selected a product, added Count 10, and clicked Add to Cart.

Now in the database we see a record with:
Id	ApplicationUserId			ProductId	Count
1	7ef5f474-6754-460c-8721-d9cca61b9d86	4		10

Now there would be an issue(Donot let the issue update the database incorrectly),
Add debugger in the post methodd and try to add the same product.

We see on adding the same product, in the update method call, the Id of cartObject is 0, so it will create a new record. TO avoid that donot let the Update method execute and set RedirectToAction as the next statement and run.

THe fix for this would be instead of updating cartObject, lets update the cartFromDb's count, and run update on the same method, it would be like:

                else 
                {
                    cartFromDb.Count += cartObject.Count;
                    _unitOfWork.ShoppingCart.Update(cartFromDb);
                }

Now run the soution,
On doing the same thing, we see now the count is updated to 11. THis is exactly what we wanted.

Now one thing he have shown is, as we are using Entity Framework, if we would comment the below update statement:
_unitOfWork.ShoppingCart.Update(cartFromDb);

then also the database would be updated. But he always prefer to use the update method. commented the line and run again, then upadate the count again and see.

We see the count is updated without the update statement. The reason for the update is EF knows that cartFromDb is from the Database and EntityFramework tracks it.

With this we can see how we can update session value.


Now let's add another product of the same user and it sould create a new row.

We see the db got updated correctly adding a new record.

So everything  is working as expected.

Next we will have a session for the ShoppingCart.


---------------------------------------------------------------
Pushed the codes to Github.


--SD.cs
using System;
using System.Collections.Generic;
using System.Text;

namespace BulkyBook.Utility
{
    public static class SD
    {
        public const string Proc_CoverType_GetAll = "usp_GetCoverTypes";
        public const string Proc_CoverType_Get = "usp_GetCoverType";
        public const string Proc_CoverType_Update = "usp_UpdateCoverType";
        public const string Proc_CoverType_Delete = "usp_DeleteCoverType";
        public const string Proc_CoverType_Create = "usp_CreateCoverType";

        public const string Role_User_Indi = "Individual Customer";
        public const string Role_User_Comp = "Company Customer";
        public const string Role_Admin = "Admin";
        public const string Role_Employee = "Employee";

        public static double GetPriceBasedOnQuantity(double quantity, double price, double price50, double price100)
        {
            if (quantity < 50)
            {
                return price;
            }
            else
            {
                if (quantity < 100)
                {
                    return price50;
                }
                else
                {
                    return price100;
                }
            }
        }
        public static string ConvertToRawHtml(string source)
        {
            char[] array = new char[source.Length];
            int arrayIndex = 0;
            bool inside = false;

            for (int i = 0; i < source.Length; i++)
            {
                char let = source[i];
                if (let == '<')
                {
                    inside = true;
                    continue;
                }
                if (let == '>')
                {
                    inside = false;
                    continue;
                }
                if (!inside)
                {
                    array[arrayIndex] = let;
                    arrayIndex++;
                }
            }
            return new string(array, 0, arrayIndex);
        }

    }
}

---HomeController.cs
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using BulkyBook.DataAccess.Repository.IRepository;
using BulkyBook.Models;
using BulkyBook.Models.ViewModels;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

namespace BulkyBook.Areas.Customer.Controllers
{
    [Area("Customer")]
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;
        private readonly IUnitOfWork _unitOfWork;

        public HomeController(ILogger<HomeController> logger, IUnitOfWork unitOfWork)
        {
            _logger = logger;
            _unitOfWork = unitOfWork;
        }

        public IActionResult Index()
        {
            IEnumerable<Product> productList = _unitOfWork.Product.GetAll(includeProperties: "Category,CoverType");
            return View(productList);
        }

        public IActionResult Details(int id)
        {
            var productFromDb = _unitOfWork.Product.GetFirstOrDefault(u => u.Id == id, includeProperties: "Category,CoverType");
            ShoppingCart cartObj = new ShoppingCart()
            {
                Product = productFromDb,
                ProductId = productFromDb.Id
            };
            return View(cartObj);
        }

        [HttpPost]
        [AutoValidateAntiforgeryToken]
        [Authorize]
        public IActionResult Details(ShoppingCart cartObject)
        {
            cartObject.Id = 0;
            if (ModelState.IsValid)
            {
                var claimsIdentity = (ClaimsIdentity)User.Identity;
                var claim = claimsIdentity.FindFirst(ClaimTypes.NameIdentifier);
                cartObject.ApplicationUserId = claim.Value;

                ShoppingCart cartFromDb = _unitOfWork.ShoppingCart.GetFirstOrDefault(
                    u => u.ApplicationUserId == cartObject.ApplicationUserId && u.ProductId == cartObject.ProductId,
                    includeProperties: "Product"
                    );
                if (cartFromDb == null)
                {
                    //no records exists in db for that product for that user.
                    _unitOfWork.ShoppingCart.Add(cartObject);
                }
                else 
                {
                    cartFromDb.Count += cartObject.Count;
                    //_unitOfWork.ShoppingCart.Update(cartFromDb);
                }
                _unitOfWork.Save();
                return RedirectToAction(nameof(Index));
            }
            else
            {
                var productFromDb = _unitOfWork.Product.GetFirstOrDefault(u => u.Id == cartObject.ProductId, includeProperties: "Category,CoverType");
                ShoppingCart cartObj = new ShoppingCart()
                {
                    Product = productFromDb,
                    ProductId = productFromDb.Id
                };
                return View(cartObj);
            }

        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}

---------------------------------------------------------------


---------------------------------------------------------------


---------------------------------------------------------------


