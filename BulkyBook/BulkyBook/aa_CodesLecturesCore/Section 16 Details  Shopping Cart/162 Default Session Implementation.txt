Now, we would be ussing Session for our Shopping cart.

Now we need a name for our session, and instead of hardcoding it would be better if we mantain our session name in SD.cs. Opened it and added the below after Role_Employee.

public const string ssShoppingCart = "Shopping Cart Session";

In session we will store the number of items in the shopping cart.

So in HomeController, update method after Save() method, added a variable count, and we would get all the entities based on the userId. we would use GetAll method and will take help of ToList and Count.

                _unitOfWork.Save();
                var count = _unitOfWork.ShoppingCart
                    .GetAll(x => x.ApplicationUserId == cartObject.ApplicationUserId)
                    .ToList().Count();

So we would use Session.SetObject extension method for storing the count in the key that we created in SD.cs constant. like:

HttpContext.Session.SetObject(SD.ssShoppingCart, count);

One thing to note here is count is an integer and we can store anything we want here. It need not be int. Instead of count if we update to cartObject, it will not give any error. And in this case we can retrieve the value like:(only demo not real code)

var obj = HttpContext.Session.GetObject<ShoppingCart>(SD.ssShoppingCart);

This means means setObject and getObject can be used on any type. They are generic.

Another thing to note here is Dot net core already provided a method for setInt32, we can use it like below and for now he used this and commented SetObject for count.

HttpContext.Session.SetInt32(SD.ssShoppingCart, count);//Works only for Int32

See the final method in the backup code below:
---------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using BulkyBook.DataAccess.Repository.IRepository;
using BulkyBook.Models;
using BulkyBook.Models.ViewModels;
using BulkyBook.Utility;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

namespace BulkyBook.Areas.Customer.Controllers
{
    [Area("Customer")]
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;
        private readonly IUnitOfWork _unitOfWork;

        public HomeController(ILogger<HomeController> logger, IUnitOfWork unitOfWork)
        {
            _logger = logger;
            _unitOfWork = unitOfWork;
        }

        public IActionResult Index()
        {
            IEnumerable<Product> productList = _unitOfWork.Product.GetAll(includeProperties: "Category,CoverType");
            return View(productList);
        }

        public IActionResult Details(int id)
        {
            var productFromDb = _unitOfWork.Product.GetFirstOrDefault(u => u.Id == id, includeProperties: "Category,CoverType");
            ShoppingCart cartObj = new ShoppingCart()
            {
                Product = productFromDb,
                ProductId = productFromDb.Id
            };
            return View(cartObj);
        }

        [HttpPost]
        [AutoValidateAntiforgeryToken]
        [Authorize]
        public IActionResult Details(ShoppingCart cartObject)
        {
            cartObject.Id = 0;
            if (ModelState.IsValid)
            {
                var claimsIdentity = (ClaimsIdentity)User.Identity;
                var claim = claimsIdentity.FindFirst(ClaimTypes.NameIdentifier);
                cartObject.ApplicationUserId = claim.Value;

                ShoppingCart cartFromDb = _unitOfWork.ShoppingCart.GetFirstOrDefault(
                    u => u.ApplicationUserId == cartObject.ApplicationUserId && u.ProductId == cartObject.ProductId,
                    includeProperties: "Product"
                    );
                if (cartFromDb == null)
                {
                    //no records exists in db for that product for that user.
                    _unitOfWork.ShoppingCart.Add(cartObject);
                }
                else 
                {
                    cartFromDb.Count += cartObject.Count;
                    //_unitOfWork.ShoppingCart.Update(cartFromDb);
                }
                _unitOfWork.Save();
                var count = _unitOfWork.ShoppingCart
                    .GetAll(x => x.ApplicationUserId == cartObject.ApplicationUserId)
                    .ToList().Count();
               // HttpContext.Session.SetObject(SD.ssShoppingCart, count);
                HttpContext.Session.SetInt32(SD.ssShoppingCart, count);
                return RedirectToAction(nameof(Index));
            }
            else
            {
                var productFromDb = _unitOfWork.Product.GetFirstOrDefault(u => u.Id == cartObject.ProductId, includeProperties: "Category,CoverType");
                ShoppingCart cartObj = new ShoppingCart()
                {
                    Product = productFromDb,
                    ProductId = productFromDb.Id
                };
                return View(cartObj);
            }

        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}


---------------------------------------------------------------


---------------------------------------------------------------


---------------------------------------------------------------


