Now, whe will work on the Ad to Card Post method. and we understood this is a post method because at the top we have form method post and the button type of Add to Cart is submit.

We have the hidden field for ProductId and we are also taking the input count.

Go to HomeController.

After Details get method add Details method with attributes [HttpPost] and [AutoValidateAntiforgeryToken], [Authorize]. We are using Authorize so that we would not allow a user to Submit by adding to cart without signing in. The paramter of the method would be ShoppingCart cartObject

        [HttpPost]
        [AutoValidateAntiforgeryToken]
        [Authorize]
        public IActionResult Details(ShoppingCart cartObject)
        { 
        
        
        }

First, initialized cartObject.Id = 0

Now we will have a check for ModelState.IsValid. in the else block first, copied the codes of Details get(codes with productFromDb) and returned view. Here the id would be cartObject.ProductId like:
 var productFromDb = _unitOfWork.Product.GetFirstOrDefault(u => u.Id == cartObject.ProductId, includeProperties: "Category,CoverType");


Now in the if block of Model state valid, We would get the cliamsIdentity like:

var claimsIdentity = (ClaimsIdentity)User.Identity; //imported System.Security.Claims;

Next we would get claim like below and our ApplicationUserId would be claim.value:
var claim = claimsIdentity.FindFirst(ClaimTypes.NameIdentifier);
cartObject.ApplicationUserId = claim.Value;

Now opened SQL server to check the ShoppingCarts table. We can see that Every user and Product combination will be unique.(the count can match or be different), so we can retrieve record from the database based on this. Also we would use includeProperites in GetFirstOrDefault to get the Product object as well like:

                ShoppingCart cartFromDb = _unitOfWork.ShoppingCart.GetFirstOrDefault(
                    u => u.ApplicationUserId == cartObject.ApplicationUserId && u.ProductId == cartObject.ProductId,
                    includeProperties: "Product"
                    );


Now if cartFromDb would be null we would need to add records to the database for the user.

IN this part only added an if check, the implementation will be done in the next part.

                if (cartFromDb == null)
                {
                    //no records exists in db for that product for that user.
                }

As in shopping cart model we have [NotMapped] Price, it would be updated based on the productid and count, we would add a method in static details for that in the next part.

---------------------------------------------------------------

--HomeController(Details Post method is breaking as we are yet to return for all paths)

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using BulkyBook.DataAccess.Repository.IRepository;
using BulkyBook.Models;
using BulkyBook.Models.ViewModels;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

namespace BulkyBook.Areas.Customer.Controllers
{
    [Area("Customer")]
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;
        private readonly IUnitOfWork _unitOfWork;

        public HomeController(ILogger<HomeController> logger, IUnitOfWork unitOfWork)
        {
            _logger = logger;
            _unitOfWork = unitOfWork;
        }

        public IActionResult Index()
        {
            IEnumerable<Product> productList = _unitOfWork.Product.GetAll(includeProperties: "Category,CoverType");
            return View(productList);
        }

        public IActionResult Details(int id)
        {
            var productFromDb = _unitOfWork.Product.GetFirstOrDefault(u => u.Id == id, includeProperties: "Category,CoverType");
            ShoppingCart cartObj = new ShoppingCart()
            {
                Product = productFromDb,
                ProductId = productFromDb.Id
            };
            return View(cartObj);
        }

        [HttpPost]
        [AutoValidateAntiforgeryToken]
        [Authorize]
        public IActionResult Details(ShoppingCart cartObject)
        {
            cartObject.Id = 0;
            if (ModelState.IsValid)
            {
                var claimsIdentity = (ClaimsIdentity)User.Identity;
                var claim = claimsIdentity.FindFirst(ClaimTypes.NameIdentifier);
                cartObject.ApplicationUserId = claim.Value;

                ShoppingCart cartFromDb = _unitOfWork.ShoppingCart.GetFirstOrDefault(
                    u => u.ApplicationUserId == cartObject.ApplicationUserId && u.ProductId == cartObject.ProductId,
                    includeProperties: "Product"
                    );
                if (cartFromDb == null)
                {
                    //no records exists in db for that product for that user.
                }

            }
            else
            {
                var productFromDb = _unitOfWork.Product.GetFirstOrDefault(u => u.Id == cartObject.ProductId, includeProperties: "Category,CoverType");
                ShoppingCart cartObj = new ShoppingCart()
                {
                    Product = productFromDb,
                    ProductId = productFromDb.Id
                };
                return View(cartObj);
            }

        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}


---------------------------------------------------------------


---------------------------------------------------------------


---------------------------------------------------------------


